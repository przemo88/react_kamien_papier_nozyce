{"version":3,"sources":["SubmitInfo.js","ResultInfo.js","StartInfo.js","App.js","serviceWorker.js","index.js"],"names":["Submit","id","click","icon","disabled","action","loterry","className","onClick","ResultInfo","props","state","userPoint","pcPoint","roundLimit","round","roundWinner","this","ran","setState","alert","Component","StartInfo","App","lottery","temp","Math","floor","random","console","log","choice","prompt","game","bind","SubmitInfo","faHandPaper","faHandRock","faHandScissors","faGamepad","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3bcdb42.chunk.js","sourcesContent":["import React from 'react';\r\nimport './submit.scss';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nfunction Submit({ id, click, icon, disabled, action, loterry }) {\r\n    return (\r\n        <button className={action} onClick={() => click(id)} disabled={disabled}><FontAwesomeIcon className=\"icon\" icon={icon} disabled={true}></FontAwesomeIcon></button>\r\n    )\r\n}\r\n\r\nexport default Submit;","import React, { Component } from 'react';\r\nimport './ResultInfo.scss';\r\n\r\nclass ResultInfo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            userPoint: 0,\r\n            pcPoint: 0,\r\n            roundLimit: this.props.round,\r\n            roundWinner: '',\r\n        }\r\n    }\r\n\r\n\r\n    componentWillReceiveProps() {\r\n        if (this.state.roundLimit > this.state.userPoint && this.state.roundLimit > this.state.pcPoint) {\r\n\r\n            if ((this.props.id === \"papier\" && this.props.ran === \"kamień\") ||\r\n                (this.props.id === \"kamień\" && this.props.ran === \"nożyce\") ||\r\n                (this.props.id === \"nożyce\" && this.props.ran === \"papier\")) {\r\n                this.setState(({ userPoint, roundWinner }) => ({\r\n                    userPoint: userPoint + 1,\r\n                    roundWinner: 'Użytkownik'\r\n                }));\r\n            }\r\n\r\n            else if (this.props.id === this.props.ran) {\r\n                this.setState(({ roundWinner }) => ({\r\n                    roundWinner: 'Remis',\r\n                }))\r\n            }\r\n            else {\r\n                this.setState(({ pcPoint, roundWinner }) => ({\r\n                    pcPoint: pcPoint + 1,\r\n                    roundWinner: 'Komputer',\r\n                }));\r\n            }\r\n        }\r\n        else {\r\n            alert('koniec gry');\r\n            this.setState(({ roundLimit }) => ({\r\n                roundLimit: 0,\r\n\r\n            }));\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render(props) {\r\n\r\n        return (\r\n\r\n            <>\r\n                <div className=\"top\">Wybrałeś: {`${this.props.id}`}</div>\r\n                <div>Ilość rund: {`${this.props.round}`}</div>\r\n                <div>Komputer wylosował: {`${this.props.ran}`}</div>\r\n                <div>Wygrał: {this.state.roundWinner}</div>\r\n                <div>Punkty gracza: {this.state.userPoint}</div>\r\n                <div>Punkty komputera: {this.state.pcPoint}</div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ResultInfo;\r\n","import React from 'react';\r\nimport './ResultInfo.scss';\r\nfunction StartInfo() {\r\n    return (\r\n        <div className=\"top\">Aby ropocząć naciśnij pierwszy klawisz od prawej strony.</div>\r\n    )\r\n}\r\n\r\nexport default StartInfo;","import React, { Component } from 'react';\nimport { faHandPaper, faHandScissors, faHandRock, faGamepad } from '@fortawesome/free-solid-svg-icons';\nimport './App.scss';\nimport SubmitInfo from './SubmitInfo';\nimport ResultInfo from './ResultInfo';\nimport StartInfo from './StartInfo';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      id: null,\n      click: false,\n    }\n\n    this.choice = this.choice.bind(this);\n    this.roundLimit = this.roundLimit.bind(this);\n    this.lottery = this.lottery.bind(this);\n    this.game = this.game.bind(this);\n  }\n\n  lottery = () => {\n\n    var temp;\n\n    temp = Math.floor(Math.random() * 3 + 1);\n    console.log(temp);\n\n    if (temp === 1) {\n      this.setState({\n        ran: 'papier',\n      })\n    }\n\n    else if (temp === 2) {\n      this.setState({\n        ran: 'kamień',\n      })\n    }\n\n    else if (temp === 3) {\n      this.setState({\n        ran: 'nożyce',\n      })\n    }\n  }\n\n  choice = (id) => {\n    this.setState({\n      id,\n    });\n    console.log(id)\n  };\n\n  roundLimit = () => {\n    this.setState({\n      round: prompt(\"Podaj ilość rund potrzebnych do wygrania\"),\n    })\n  }\n\n  game = (id) => {\n    this.choice(id);\n    this.lottery();\n  }\n\n\n  render() {\n    return (\n      <div>\n        <div className=\"board\">\n          <div className=\"title_row\">\n            <h1 className=\"title\">Kamień, Papier, Nożyce</h1>\n          </div>\n        </div>\n        <div className=\"board\">\n          <div className=\"submit_row\">\n            <SubmitInfo id=\"papier\" icon={faHandPaper} click={this.game}\n              disabled={!this.state.round ? true : false}\n              action={!this.state.round ? \"submit disable\" : \"submit enable\"}></SubmitInfo>\n            <SubmitInfo id=\"kamień\" icon={faHandRock} click={this.game}\n              disabled={!this.state.round ? true : false}\n              action={!this.state.round ? \"submit disable\" : \"submit enable\"}></SubmitInfo>\n            <SubmitInfo id=\"nożyce\" icon={faHandScissors} click={this.game}\n              disabled={!this.state.round ? true : false}\n              action={!this.state.round ? \"submit disable\" : \"submit enable\"}></SubmitInfo>\n            <SubmitInfo id=\"gra\" icon={faGamepad} click={this.roundLimit}\n              action={!this.state.round ? \"submit enable\" : \"submit disable\"}></SubmitInfo>\n            {this.state.id ? <ResultInfo id={this.state.id} round={this.state.round} ran={this.state.ran} /> : null}\n            {!this.state.round ? <StartInfo></StartInfo> : null}\n\n          </div>\n        </div>\n      </div>\n    )\n\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}