{"version":3,"sources":["ResultInfo.js","GameInfo.js","Counter.js","App.js","serviceWorker.js","index.js"],"names":["ReactInfo","props","className","this","roundLimit","id","ran","roundWinner","userPoint","pcPoint","Component","GameInfo","Counter","lottery","event","temp","users_choice","target","setState","PC_choice","Math","floor","random","state","gameWin","endGame","handleOpenModal","showModal","handleCloseModal","endGameModalOpen","e","preventDefault","endGameModalClose","bind","handleChange","parseInt","value","onClick","disabled","isOpen","type","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e518ea7d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./ResultInfo.scss\";\n\nclass ReactInfo extends Component {\n    render(props) {\n        return (\n            <div className=\"result\">\n                <div className=\"left\">\n                    <div className=\"info\">Round Limit: <br></br> {`${this.props.roundLimit}`}</div>\n                    <div className=\"info\">You choice: <br></br> {`${this.props.id}`}</div>\n                    <div className=\"info\">PC choice: <br></br> {`${this.props.ran}`}</div>\n                </div>\n                <div className=\"right\">\n                    <div className=\"info\">Round Winner: <br></br> {`${this.props.roundWinner}`}</div>\n                    <div className=\"info\">User Point: <br></br> {`${this.props.userPoint}`}</div>\n                    <div className=\"info\">PC Point: <br></br> {`${this.props.pcPoint}`}</div>\n                </div>\n            </div >\n        );\n    }\n}\nexport default ReactInfo;","import React from 'react';\nimport \"./Counter.scss\";\nimport \"./GameInfo.scss\";\nfunction GameInfo(props) {\n\n    const roundLimit = props.roundLimit;\n\n    if (roundLimit) {\n        return (\n\n            <div className=\"submit_row game_info\">Now you can play.</div>\n        )\n    }\n    else {\n        return (\n\n            <div className=\"submit_row game_info\">To start press the first button on the left.</div>\n        )\n    }\n\n\n}\n\nexport default GameInfo;","import React, { Component } from \"react\";\r\nimport ReactModal from \"react-modal\";\r\nimport ResultInfo from \"./ResultInfo\";\r\nimport GameInfo from \"./GameInfo\";\r\nimport './Counter.scss';\r\nimport './ReactModal.scss';\r\n\r\nclass Counter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ran: \"\",\r\n            id: \"\",\r\n            userPoint: 0,\r\n            pcPoint: 0,\r\n            roundLimit: 0,\r\n            roundWinner: \"\",\r\n            showModal: false,\r\n            endGame: false,\r\n            gameWin: \"\"\r\n        };\r\n\r\n        this.lottery = this.lottery.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleOpenModal = this.handleOpenModal.bind(this);\r\n        this.handleCloseModal = this.handleCloseModal.bind(this);\r\n        this.endGameModalOpen = this.endGameModalOpen.bind(this);\r\n        this.endGameModalClose = this.endGameModalClose.bind(this);\r\n    }\r\n    lottery = (event, temp, roundLimit, pcPoint, userPoint) => {\r\n\r\n        const users_choice = event.target.id;\r\n        this.setState({ id: users_choice });\r\n\r\n        const PC_choice = [\"paper\", \"stone\", \"scissors\"][Math.floor(Math.random() * 3)];\r\n        this.setState({ ran: PC_choice });\r\n\r\n        if (\r\n            this.state.roundLimit !== this.state.userPoint &&\r\n            this.state.roundLimit !== this.state.pcPoint\r\n        ) {\r\n            if (\r\n                (users_choice === \"paper\" && PC_choice === \"stone\") ||\r\n                (users_choice === \"stone\" && PC_choice === \"scissors\") ||\r\n                (users_choice === \"scissors\" && PC_choice === \"paper\")\r\n            ) {\r\n                this.setState(({ userPoint, roundWinner }) => ({\r\n                    userPoint: userPoint + 1,\r\n                    roundWinner: \"User\"\r\n                }));\r\n            } else if (users_choice === PC_choice) {\r\n                this.setState(({ roundWinner }) => ({\r\n                    roundWinner: \"Draw\"\r\n                }));\r\n            } else {\r\n                this.setState(({ pcPoint, roundWinner }) => ({\r\n                    pcPoint: pcPoint + 1,\r\n                    roundWinner: \"PC\"\r\n                }));\r\n            }\r\n        } else {\r\n\r\n            this.state.pcPoint > this.state.userPoint ? this.setState({ gameWin: \"PC WIN THE GAME\" }) : this.setState({ gameWin: \"USER WIN THE GAME\" })\r\n\r\n\r\n            this.setState(({ pcPoint, userPoint }) => ({\r\n                pcPoint: 0,\r\n                userPoint: 0,\r\n                roundLimit: 0,\r\n                id: \"\",\r\n                ran: \"\",\r\n                roundWinner: \"\",\r\n                endGame: true\r\n            }));\r\n        }\r\n    };\r\n\r\n    handleChange(event) {\r\n        this.setState({ roundLimit: parseInt(event.target.value) });\r\n    }\r\n\r\n    handleOpenModal = () => {\r\n        this.setState({ showModal: true });\r\n    }\r\n\r\n    handleCloseModal = () => {\r\n        this.setState({ showModal: false });\r\n    }\r\n\r\n    endGameModalOpen = e => {\r\n        e.preventDefault();\r\n        this.setState({ endGame: true });\r\n\r\n    }\r\n\r\n    endGameModalClose = () => {\r\n        this.setState({ endGame: false });\r\n    }\r\n\r\n    render(props) {\r\n\r\n        return (\r\n            <>\r\n                <div className=\"board\">\r\n                    <div className=\"title_row\">\r\n                        <h1>Paper, Stone, Scissors</h1>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"board\">\r\n                    <div className=\"submit_row\">\r\n\r\n                        <button\r\n                            onClick={this.handleOpenModal}\r\n                            disabled={!this.state.roundLimit ? false : true}\r\n                            className={!this.state.roundLimit ? \"green btn-game\" : \"red btn-game\"}\r\n                        >\r\n                        </button>\r\n\r\n                        <ReactModal className=\"modal\" isOpen={this.state.showModal}>\r\n                            <button className=\"modal_btn\" onClick={this.handleCloseModal}>X</button>\r\n                            <p className=\"modal_text\">Enter the number of rounds</p>\r\n                            <div className=\"modal_input\">\r\n                                <input\r\n                                    className=\"modal_input\"\r\n                                    type=\"number\"\r\n                                    roundLimit={this.state.value}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </div>\r\n                        </ReactModal>\r\n\r\n                        <ReactModal className=\"modal modal_end\" isOpen={this.state.endGame}>\r\n                            <button className=\"modal_btn\" onClick={this.endGameModalClose}>X</button>\r\n                            <p className=\"modal_text\">GAME OVER</p>\r\n                            <p className=\"modal_text\">{this.state.gameWin}</p>\r\n                        </ReactModal>\r\n\r\n                        <button\r\n                            onClick={this.lottery}\r\n                            id=\"paper\"\r\n                            disabled={!this.state.roundLimit ? true : false}\r\n                            className={!this.state.roundLimit ? \"red btn-paper\" : \"green btn-paper\"}\r\n                        >\r\n                        </button>\r\n\r\n                        <button\r\n                            onClick={this.lottery}\r\n                            id=\"stone\"\r\n                            disabled={!this.state.roundLimit ? true : false}\r\n                            className={!this.state.roundLimit ? \"red btn-stone\" : \"green btn-stone\"}\r\n                        >\r\n                        </button>\r\n\r\n                        <button\r\n                            onClick={this.lottery}\r\n                            id=\"scissors\"\r\n                            disabled={!this.state.roundLimit ? true : false}\r\n                            className={!this.state.roundLimit ? \"red btn-scissors\" : \"green btn-scissors\"}\r\n                        >\r\n                        </button>\r\n\r\n                    </div>\r\n\r\n                    {this.state.id ?\r\n\r\n                        <ResultInfo\r\n                            id={this.state.id}\r\n                            roundLimit={this.state.roundLimit}\r\n                            ran={this.state.ran}\r\n                            roundWinner={this.state.roundWinner}\r\n                            userPoint={this.state.userPoint}\r\n                            pcPoint={this.state.pcPoint}\r\n                        /> :\r\n\r\n                        <GameInfo\r\n                            roundLimit={this.state.roundLimit}\r\n                        ></GameInfo>}\r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Counter;\r\n","import React from \"react\";\nimport Counter from \"./Counter\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Counter />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'font-awesome/css/font-awesome.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}